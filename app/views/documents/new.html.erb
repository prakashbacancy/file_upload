<div class="main-wrapper">
  <section class="section-padding">
    <%= form_for @document, html: { "data-parsley-validate" => "", class: "document-form" } do |form| %>
    <div class="container">
      <div class="row">
        <div class="col-xl-8 col-md-10 col-12 mx-auto">
          <div class="shadow upload-wrapper">
            <%= form.hidden_field :file_type, value: params[:file_type] %>
            <%#= form.hidden_field :user_id, value: current_user.id %>
            <h4 class="text-primary mb-2">Add Input File</h4>
            <div class="inputDnD">
              <label class="bg-shadow upload-box cursor-pointer text-black d-block text-center position-relative">
                <%= form.file_field :document_file, class: "form-control-file text-primary font-weight-bold position-absolute", style: "opacity: 0;", onchange: "readUrl(this)", id: "inputFile", 'data-parsley-fileextension': "doc,docx,csv,txt", 'data-parsley-filemaxsize': "10", 'data-parsley-fileextension-message': "Please upload valid file", 'data-parsley-trigger': "change", 'data-parsley-errors-container': ".available_error" %>
                <%= image_tag "upload-icon.svg", alt: "upload icon", class: "mx-auto d-block" %>
                <%= form.label :document_file, class: "sr-only", id: "input-file-max-fs" %>
                <span class="h6 d-block mt-4" id="file_name">Drag and Drop your file here</span>
                <span class="h6 d-block my-4 text-muted fw-normal">OR</span>
                <span class="btn btn-primary btn-sm py-2">Add File</span>
                <span class="h6 available_error mt-4"></span>
              </label>
            </div>
            <div class="text-center">
              <%= form.submit class: "btn btn-primary" %>
            </div>
          </div>
        </div>
      </div>
    </div>
    <% end %>
  </section>
</div>
<script type="text/javascript">
    function readUrl(input) {
    if (input.files && input.files[0]) {
      let reader = new FileReader();
      reader.onload = (e) => {
        let imgData = e.target.result;
        let imgName = input.files[0].name;
        input.setAttribute("data-title", imgName);
        $("#file_name").text(imgName);
      }
      reader.readAsDataURL(input.files[0]);
    }

  }

  // $(document).ready(function() {
  //   $('form').parsley({
  //       validators: {
  //           filemaxsize: function() {
  //               return {
  //                   validate: function (val, max_megabytes, parsleyField) {
  //                       if (!Modernizr.fileapi) { return true; }
                        
  //                       var $file_input = $(parsleyField.element);
  //                       if ($file_input.is(':not(input[type="file"])')) {
  //                           console.log("Validation on max file size only works on file input types");
  //                           return true;
  //                       }
                        
  //                       var max_bytes = max_megabytes * BYTES_PER_MEGABYTE, files = $file_input.get(0).files;
                        
  //                       if (files.length == 0) {
  //                           // No file, so valid. (Required check should ensure file is selected)
  //                           return true;
  //                       }
                        
  //                       return files.length == 1  && files[0].size <= max_bytes;
  //                   },
  //                   priority: 1
  //               };
  //           }
  //       },
  //       messages: {
  //           filemaxsize: "The file cannot be more than %s megabytes."
  //       }
  //       , excluded: 'input[type=hidden] :disabled'
  //   });
  // });
</script>